#!/usr/bin/env python3
"""
LaTeX TOC Parser
Parses the .toc file generated by LaTeX for accurate outline extraction.
"""

import re
import sys
from dataclasses import dataclass
from pathlib import Path


@dataclass(slots=True)
class TocEntry:
    level: int
    number: str
    title: str
    page: str


def parse_toc_file(toc_file: Path) -> list[TocEntry]:
    """Parse LaTeX .toc file and extract structure."""
    if not toc_file.exists():
        return []

    content = toc_file.read_text()
    pattern = r"\\contentsline\s*\{(\w+)\}\s*\{\\numberline\s*\{([^}]+)\}([^}]*)\}\s*\{(\d+)\}"
    level_map = {"section": 1, "subsection": 2, "subsubsection": 3, "paragraph": 4, "subparagraph": 5}

    sections = []
    for match in re.finditer(pattern, content):
        level_type, number, title, page = match.groups()

        # Clean LaTeX commands from title
        title = re.sub(r"\\[a-zA-Z]+\s*\{[^}]*\}", "", title)
        title = re.sub(r"\\[a-zA-Z]+", "", title).strip()

        level = level_map.get(level_type, 1)
        sections.append(TocEntry(level, number, title, page))

    return sections


def get_marker(level: int) -> str:
    """Get Unicode marker for hierarchy level."""
    markers = {1: "â–ˆ", 2: "â–“", 3: "â–’"}
    return markers.get(level, "â–‘")


def format_toc_outline(sections: list[TocEntry], show_numbers: bool = True, show_pages: bool = False) -> str:
    """Format TOC sections as a hierarchical outline."""
    if not sections:
        return ""

    outline = []
    for entry in sections:
        indent = "  " * (entry.level - 1)
        marker = get_marker(entry.level)
        number_part = f"{entry.number}. " if show_numbers else ""
        page_part = f" (p.{entry.page})" if show_pages else ""

        outline.append(f"{indent}{marker} {number_part}{entry.title}{page_part}")

    return "\n".join(outline)


def find_toc_file(toc_arg: str) -> Path:
    """Find the appropriate .toc file."""
    if toc_arg != "*.toc":
        return Path(toc_arg)

    # Look in .out/ directory first (per style guide)
    out_dir = Path(".out")
    if out_dir.exists():
        toc_files = list(out_dir.glob("*.toc"))
        if toc_files:
            return toc_files[0]

    # Fall back to current directory
    toc_files = list(Path(".").glob("*.toc"))
    if not toc_files:
        print("No .toc files found in .out/ or current directory.")
        print("Run pdflatex with output directed to .out/ first.")
        sys.exit(1)

    return toc_files[0]


def print_outline(toc_file: Path, sections: list[TocEntry], show_numbers: bool, show_pages: bool):
    """Print the formatted outline."""
    if not sections:
        print("No sections found in TOC file.")
        return

    print(f"ðŸ“‹ Document Outline (from {toc_file.name})")
    print("=" * 50)
    outline = format_toc_outline(sections, show_numbers, show_pages)
    print(outline)


def main():
    import argparse

    parser = argparse.ArgumentParser(description="Parse LaTeX .toc file for outline")
    parser.add_argument("toc_file", nargs="?", default="*.toc", help="TOC file to parse")
    parser.add_argument("--no-numbers", action="store_true", help="Hide section numbers")
    parser.add_argument("--pages", "-p", action="store_true", help="Show page numbers")

    args = parser.parse_args()

    toc_file = find_toc_file(args.toc_file)
    sections = parse_toc_file(toc_file)
    print_outline(toc_file, sections, not args.no_numbers, args.pages)


if __name__ == "__main__":
    main()
