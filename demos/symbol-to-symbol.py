#!/usr/bin/env python3
"""
Demo: Symbol-to-Symbol Mapping in K√©ya

This demonstrates that the symbol system can map symbols to other symbols,
not just symbols to numbers. We show three approaches:

1. Built-in omega (œâ) transformation: symbol ‚Üí symbol
2. Grammar-based string generation: symbol ‚Üí [symbols]  
3. Custom transformation functions: symbol ‚Üí symbol

The key insight: symbols are first-class entities that can transform into other symbols!
"""

import sys
sys.path.append('src')

import jax.numpy as jnp
from keya.core.operators import (
    Glyph, omega, create_glyph_matrix, 
    SIMPLE_GRAMMAR, BINARY_GRAMMAR, Grammar,
    generate_string_from_seed, string_to_text, extract_string_from_matrix,
    apply_glyph_transform
)

def print_glyph_matrix(matrix, title):
    """Pretty print a glyph matrix with symbols."""
    print(f"\n{title}:")
    symbols = {
        0: "‚àÖ", 1: "‚ñΩ", 2: "‚ñ≥", 3: "‚äô", 4: "‚äï"
    }
    for row in matrix:
        row_str = " ".join(symbols.get(int(val), "?") for val in row)
        print(f"  {row_str}")

def custom_transform(glyph_value):
    """Custom symbol-to-symbol transformation function."""
    # ‚àÖ‚Üí‚äï, ‚ñΩ‚Üí‚äô, ‚ñ≥‚Üí‚àÖ, ‚äô‚Üí‚ñΩ, ‚äï‚Üí‚ñ≥
    transform_map = {0: 4, 1: 3, 2: 0, 3: 1, 4: 2}
    return transform_map.get(glyph_value, glyph_value)

def main():
    print("üî• Symbol-to-Symbol Mapping Demo")
    print("=" * 50)
    
    # 1. SYMBOL-TO-NUMBER MAPPING (traditional)
    print("\n1Ô∏è‚É£ SYMBOL-TO-NUMBER MAPPING")
    print("Symbols get interpreted as numeric values:")
    
    mixed_matrix = jnp.array([[0, 1], [2, 3]])  # ‚àÖ, ‚ñΩ, ‚ñ≥, ‚äô
    print_glyph_matrix(mixed_matrix, "Original Matrix (symbols as numbers)")
    
    print("\nNumeric interpretation:")
    print(f"  As numbers: {mixed_matrix.tolist()}")
    
    # 2. SYMBOL-TO-SYMBOL MAPPING (omega transformation)
    print("\n2Ô∏è‚É£ SYMBOL-TO-SYMBOL MAPPING (Omega œâ)")
    print("Symbols transform into other symbols!")
    
    print("\nOmega transformation rules:")
    print("  ‚àÖ ‚Üí ‚ñΩ  (void becomes down)")
    print("  ‚ñΩ ‚Üí ‚ñ≥  (down becomes up)")  
    print("  ‚ñ≥ ‚Üí ‚ñΩ  (up becomes down)")
    print("  ‚äô ‚Üí ‚äô  (unity stays unity)")
    print("  ‚äï ‚Üí ‚äï  (flow stays flow)")
    
    # Apply omega transformation element-wise
    def apply_omega_to_matrix(matrix):
        # Convert to regular numpy first, then back to JAX
        result = jnp.zeros_like(matrix)
        for i in range(matrix.shape[0]):
            for j in range(matrix.shape[1]):
                glyph = Glyph(int(matrix[i, j]))
                transformed = omega(glyph)
                result = result.at[i, j].set(transformed.value)
        return result
    
    omega_result = apply_omega_to_matrix(mixed_matrix)
    print_glyph_matrix(omega_result, "After Omega Transformation")
    
    # 3. CUSTOM SYMBOL-TO-SYMBOL TRANSFORMATION
    print("\n3Ô∏è‚É£ CUSTOM SYMBOL-TO-SYMBOL MAPPING")
    print("Custom transformation rules:")
    print("  ‚àÖ‚Üí‚äï, ‚ñΩ‚Üí‚äô, ‚ñ≥‚Üí‚àÖ, ‚äô‚Üí‚ñΩ, ‚äï‚Üí‚ñ≥")
    
    # Apply custom transformation manually to avoid JAX issues
    custom_result = jnp.zeros_like(mixed_matrix)
    for i in range(mixed_matrix.shape[0]):
        for j in range(mixed_matrix.shape[1]):
            val = int(mixed_matrix[i, j])
            transformed_val = custom_transform(val)
            custom_result = custom_result.at[i, j].set(transformed_val)
    print_glyph_matrix(custom_result, "After Custom Transformation")
    
    # 4. GRAMMAR-BASED SYMBOL-TO-SYMBOL GENERATION
    print("\n4Ô∏è‚É£ GRAMMAR-BASED SYMBOL GENERATION")
    print("Symbols generate sequences of other symbols!")
    
    print("\nSimple Grammar Rules:")
    print("  ‚ñΩ ‚Üí ‚ñ≥  (down becomes up)")
    print("  ‚ñ≥ ‚Üí ‚äï  (up becomes flow)")
    print("  ‚äï ‚Üí ‚ñΩ  (flow becomes down)")
    print("  ‚àÖ ‚Üí ‚ñΩ  (void starts sequence)")
    
    # Generate symbol strings using grammar
    string_matrix = generate_string_from_seed(Glyph.VOID, SIMPLE_GRAMMAR, 8)
    glyph_string = extract_string_from_matrix(string_matrix)
    symbol_text = string_to_text(glyph_string)
    
    print(f"\nGenerated symbol sequence from ‚àÖ:")
    print(f"  {symbol_text}")
    
    print("\nBinary Grammar (alternating):")
    binary_string_matrix = generate_string_from_seed(Glyph.VOID, BINARY_GRAMMAR, 6)
    binary_glyph_string = extract_string_from_matrix(binary_string_matrix)
    binary_text = string_to_text(binary_glyph_string)
    print(f"  {binary_text}")
    
    # 5. FIBONACCI-LIKE SYMBOL SEQUENCE
    print("\n5Ô∏è‚É£ FIBONACCI-LIKE SYMBOL SEQUENCES")
    fibonacci_grammar = Grammar({
        Glyph.VOID: [Glyph.DOWN],           # Start: ‚àÖ ‚Üí ‚ñΩ
        Glyph.DOWN: [Glyph.UP],             # A: ‚ñΩ ‚Üí ‚ñ≥  
        Glyph.UP: [Glyph.DOWN, Glyph.UP],   # B: ‚ñ≥ ‚Üí ‚ñΩ‚ñ≥ (Fibonacci!)
        Glyph.UNITY: [Glyph.UNITY],         # ‚äô ‚Üí ‚äô
        Glyph.FLOW: [Glyph.VOID]            # ‚äï ‚Üí ‚àÖ
    })
    
    fib_matrix = generate_string_from_seed(Glyph.VOID, fibonacci_grammar, 10)
    fib_string = extract_string_from_matrix(fib_matrix)
    fib_text = string_to_text(fib_string)
    print(f"Fibonacci symbol sequence: {fib_text}")
    
    print("\n‚úÖ CONCLUSION:")
    print("Symbol-translation can map symbols to symbols through:")
    print("  ‚Ä¢ Built-in transformations (omega)")
    print("  ‚Ä¢ Custom transformation functions") 
    print("  ‚Ä¢ Grammar-based symbol generation")
    print("  ‚Ä¢ Context-dependent evolution rules")
    print("\nSymbols are not just numbers - they're autonomous entities!")

if __name__ == "__main__":
    main() 